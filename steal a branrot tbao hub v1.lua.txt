

local CoreGui = game:GetService("StarterGui")
    CoreGui:SetCore("SendNotification", {
        Title = "khang doremon",
        Text = "Loading script",
        Icon = "rbxthumb://type=Asset&id=119525744204425",
        Duration = 6,
        Callback = AllowRunServiceBind,
    })



local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Window = WindUI:CreateWindow({
    Title = "Khang doremon | Steal a Branrot",
    Icon = "rbxassetid://95472747120306",
    Author = "by thaibao7444",
    Folder = "khang doremon",
    Size = UDim2.fromOffset(580, 340),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    Background = "", 
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    KeySystem = { 
        Key = {"khangdoremon" },
        Note = "Get key",
        URL = "https://anotepad.com/notes/23igm853",
        SaveKey = false,
    },
})
Window:EditOpenButton({
    Title = "Open Example UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new( 
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    Draggable = true,
})


local Tabs = {
	Info = Window:Tab({ Title = "Info", Icon = "info" }),
    Main = Window:Tab({ Title = "Main", Icon = "book" }),
    Visual = Window:Tab({ Title = "Visual", Icon = "sword" }),
    Esp = Window:Tab({ Title = "Esp", Icon = "ghost" }),
    Misc = Window:Tab({ Title = "Misc", Icon = "boxes" }),
}

Window:SelectTab(1)

Tabs.Info:Button({
    Title = "Copy tÃªn tiktok",
    Callback = function()
      setclipboard("@khang2742_q")         
    end
})

Tabs.Main:Section({Title = "Coin"})



local TeleportClaimCoins = false
local claimThread

local function AutoClaimCoins()
    if claimThread then
        task.cancel(claimThread)
        claimThread = nil
    end

    if TeleportClaimCoins then
        claimThread = task.spawn(function()
            while TeleportClaimCoins do
                for i = 1, 10 do
                    local args = { i }
                    local success, err = pcall(function()
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Packages")
                            :WaitForChild("Net")
                            :WaitForChild("RE/PlotService/ClaimCoins")
                            :FireServer(unpack(args))
                    end)

                    if not success then
                    end
                    task.wait()
                end
            end
        end)
    end
end




Tabs.Main:Toggle({
    Title = "Auto claim coin",
    Value = false,
    Callback = function(state)
        TeleportClaimCoins = state
        AutoClaimCoins()
    end
})




Tabs.Main:Section({Title = "Tool"})





local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = Players.LocalPlayer



local selectedTool = nil
local toolOptions = {}
for _, item in pairs(game.ReplicatedStorage.Items:GetChildren()) do
    if item:IsA("Tool") then
        table.insert(toolOptions, item.Name)
    end
end

 Tabs.Main:Dropdown({
    Title = "Select tool fake",
    Values = toolOptions,
    Value = toolOptions[1],
    Callback = function(Value) 
    selectedTool = Value
    end
})




Tabs.Main:Button({
    Title = "Get select tool",
    Callback = function()
            if selectedTool and Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") then
            local tool = game.ReplicatedStorage.Items:FindFirstChild(selectedTool)
            if tool and tool:IsA("Tool") then
                local clonedTool = tool:Clone()
                clonedTool.Parent = Player.Backpack
            else
            end
        else
        end
    end
})


Tabs.Main:Button({
    Title = "Get all tool",
    Callback = function()
            if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") then
            for _, item in pairs(game.ReplicatedStorage.Items:GetChildren()) do
                if item:IsA("Tool") then
                    local clonedTool = item:Clone()
                    clonedTool.Parent = Player.Backpack
                end
            end
        end
    end
})


Tabs.Main:Section({Title = "Sell"})




local sellSlots = {}
for i = 1, 10 do
    table.insert(sellSlots, tostring(i))
end

local selectedSlot = 1 



Tabs.Main:Dropdown({
    Title = "Select branrot sell",
    Values = sellSlots,
    Value = "1",
    Callback = function(Value) 
selectedSlot = tonumber(Value)
    end
})







Tabs.Main:Button({
    Title = "Auto sell branrot select",
    Callback = function()
        local args = { selectedSlot }
        game:GetService("ReplicatedStorage")
            :WaitForChild("Packages")
            :WaitForChild("Net")
            :WaitForChild("RE/PlotService/Sell")
            :FireServer(unpack(args))
    end
})





Tabs.Visual:Section({Title = "Local"})




Tabs.Visual:Button({
    Title = "Steal",
    Callback = function()
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local random = Random.new()
local tpAmt = 70
local void = CFrame.new(0, -3.4028234663852886e+38, 0)
local teleporting = false

local char, humanoid, hrp

local function GetCharacter()
    return Player.Character or Player.CharacterAdded:Wait()
end

local function SetupCharacter()
    char = GetCharacter()
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
end

SetupCharacter()
Player.CharacterAdded:Connect(SetupCharacter)

local function TP(position)
    if not teleporting and hrp then
        teleporting = true
        if typeof(position) == "CFrame" then
            hrp.CFrame = position + Vector3.new(
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001)
            )
            RunService.Heartbeat:Wait()
            teleporting = false
        end
    end
end

local function FindDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return nil end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox then return hitbox end
            end
        end
    end
    return nil
end

local function TeleportToDelivery()
    if not char or not hrp then return end
    local hitbox = FindDelivery()
    if not hitbox then return end

    local target = hitbox.CFrame * CFrame.new(0, -3, 0)

    for i = 1, tpAmt do
        TP(target)
    end

    for _ = 1, 2 do
        TP(void)
    end

    for i = 1, math.floor(tpAmt / 16) do
        TP(target)
    end

   
    local distance = (hrp.Position - target.Position).Magnitude
    if distance <= 30 then
    end
end

TeleportToDelivery()
    end
})


Tabs.Visual:Button({
    Title = "Tween steal",
    Callback = function()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local random = Random.new()

local TELEPORT_ITERATIONS = 85
local VOID_CFRAME = CFrame.new(0, -3e40, 0)
local JITTER_RANGE = 0.0002


local char, humanoid, hrp

local function GetCharacter()
    return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

local function SetupCharacter()
    char = GetCharacter()
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
end

SetupCharacter()
LocalPlayer.CharacterAdded:Connect(SetupCharacter)


local function TweenSteal()
    local function executeStealthMovement(targetCF, steps)
        if not hrp or typeof(targetCF) ~= "CFrame" then
            return false
        end
        
        local currentPos = hrp.Position
        local targetPos = targetCF.Position
        local startTime = tick()

        for i = 1, steps do
            local progress = (tick() - startTime) / (steps * 0.02)
            progress = math.min(progress, 1)
            
            local curvedProgress = progress * progress * (3 - 2 * progress)
            
            local newPos = currentPos:Lerp(targetPos, curvedProgress)
            newPos += Vector3.new(
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE),
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE),
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE)
            )

            hrp.CFrame = CFrame.new(newPos) * (hrp.CFrame - hrp.Position)
            
            local waitTime = random:NextNumber(0.005, 0.015)
            task.wait(waitTime)
        end
        return true
    end

    local function findDeliverySpot()
        for _, v in ipairs(workspace.Plots:GetDescendants()) do
            if v.Name == "DeliveryHitbox" and v.Parent:FindFirstChild("PlotSign") then
                if v.Parent.PlotSign:FindFirstChild("YourBase") and v.Parent.PlotSign.YourBase.Enabled then
                    return v
                end
            end
        end
        return nil
    end

    local delivery = findDeliverySpot()
    if not delivery then
        return
    end

    local targetPos = delivery.CFrame * CFrame.new(0, random:NextInteger(-3, -1), 0)
    
    for _ = 1, 3 do
        task.spawn(function()
            local success = executeStealthMovement(targetPos, TELEPORT_ITERATIONS)
            if success then
                for _ = 1, 3 do
                    hrp.CFrame = VOID_CFRAME
                    task.wait(random:NextNumber(0.05, 0.1))
                    hrp.CFrame = targetPos
                    task.wait(random:NextNumber(0.05, 0.1))
                end
            end
            task.wait(random:NextNumber(0.1, 0.3))
        end)
    end
end
TweenSteal()
    end
})




local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

local infJumpEnabled = false
local lastJumpTime = 0
local COOLDOWN = 0.5
local JUMP_FORCE = 50
local JUMP_DURATION = 0.2

local function safeAirJump()
    if not infJumpEnabled then return end

    local now = os.clock()
    if now - lastJumpTime < COOLDOWN then return end

    local character = LocalPlayer.Character
    if not character then return end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end

    lastJumpTime = now

    if rootPart:CanSetNetworkOwnership() then
        rootPart:SetNetworkOwner(LocalPlayer)
    end

    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
    bodyVelocity.Velocity = Vector3.new(0, JUMP_FORCE, 0)
    bodyVelocity.Parent = rootPart

    local connection
    connection = RunService.Heartbeat:Connect(function()
        if os.clock() - lastJumpTime >= JUMP_DURATION then
            bodyVelocity:Destroy()
            if rootPart:CanSetNetworkOwnership() then
                rootPart:SetNetworkOwner(nil)
            end
            connection:Disconnect()
        end
    end)
end

UserInputService.JumpRequest:Connect(function()
    safeAirJump()
end)


Tabs.Visual:Toggle({
    Title = "Inf jump",
    Value = false,
    Callback = function(Value)
        infJumpEnabled = Value
    end
})





Tabs.Visual:Section({Title = "Gui"})




Tabs.Visual:Button({
    Title = "Boost speed",
    Callback = function()
    local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Name = "SpeedBoostGUI"
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")


local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 200, 0, 80)
mainFrame.Position = UDim2.new(0.5, -100, 0.7, -40)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = gui


local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = mainFrame


local toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "ToggleButton"
toggleBtn.Size = UDim2.new(0.9, 0, 0.6, 0)
toggleBtn.Position = UDim2.new(0.05, 0, 0.2, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Text = "Boost speed"
toggleBtn.Font = Enum.Font.Gotham
toggleBtn.TextSize = 14
toggleBtn.Parent = mainFrame


local btnCorner = Instance.new("UICorner")
btnCorner.CornerRadius = UDim.new(0, 6)
btnCorner.Parent = toggleBtn

local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
statusLabel.Position = UDim2.new(0.05, 0, 0.8, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.Text = "Status: ready"
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 12
statusLabel.Parent = mainFrame


local isBoosting = false
local speedConnection = nil
local DEFAULT_SPEED = 16
local BOOSTED_SPEED = 45


local function toggleBoost()
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    
    isBoosting = not isBoosting
    
    if isBoosting then

        toggleBtn.Text = "Boost speed"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(80, 120, 80)
        statusLabel.Text = "Status: enable boost"
        
        speedConnection = RunService.Heartbeat:Connect(function()
            if not isBoosting or not character:IsDescendantOf(workspace) then
                toggleBoost()
                return
            end
            
            if humanoid.MoveDirection.Magnitude > 0 then
                local moveDir = humanoid.MoveDirection
                rootPart.Velocity = Vector3.new(
                    moveDir.X * BOOSTED_SPEED,
                    rootPart.Velocity.Y,
                    moveDir.Z * BOOSTED_SPEED
                )
            end
        end)
    else

        if speedConnection then
            speedConnection:Disconnect()
            speedConnection = nil
        end
        
        toggleBtn.Text = "Boost speed"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        statusLabel.Text = "Status: disable boost"
        
        if rootPart then
            rootPart.Velocity = Vector3.new(0, rootPart.Velocity.Y, 0)
        end
    end
end

toggleBtn.MouseButton1Click:Connect(function()
    pcall(toggleBoost)
end)

player.CharacterAdded:Connect(function(character)
    if isBoosting then
        
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
        
       
        if speedConnection then
            speedConnection:Disconnect()
        end
        
        speedConnection = RunService.Heartbeat:Connect(function()
            if humanoid.MoveDirection.Magnitude > 0 then
                local moveDir = humanoid.MoveDirection
                rootPart.Velocity = Vector3.new(
                    moveDir.X * BOOSTED_SPEED,
                    rootPart.Velocity.Y,
                    moveDir.Z * BOOSTED_SPEED
                )
            end
        end)
    end
end)

gui.AncestryChanged:Connect(function()
    if not gui:IsDescendantOf(game) and isBoosting then
        pcall(toggleBoost)
    end
end)
    end
})


Tabs.Visual:Button({
    Title = "Float",
    Callback = function()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")


local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Name = "FloatGUI"
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling 
gui.Parent = player:WaitForChild("PlayerGui") 


local mainFrame = Instance.new("Frame")
mainFrame.Name = "FloatFrame"
mainFrame.Size = UDim2.new(0, 180, 0, 80)
mainFrame.Position = UDim2.new(0.5, -90, 0.7, -40)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = gui


local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = mainFrame


local floatBtn = Instance.new("TextButton")
floatBtn.Name = "FloatButton"
floatBtn.Size = UDim2.new(0.9, 0, 0.6, 0)
floatBtn.Position = UDim2.new(0.05, 0, 0.2, 0)
floatBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
floatBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
floatBtn.Text = "Float"
floatBtn.Font = Enum.Font.Gotham
floatBtn.TextSize = 14
floatBtn.Parent = mainFrame


local btnCorner = Instance.new("UICorner")
btnCorner.CornerRadius = UDim.new(0, 6)
btnCorner.Parent = floatBtn


local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
statusLabel.Position = UDim2.new(0.05, 0, 0.8, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.Text = "Status: ready"
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 12
statusLabel.Parent = mainFrame

local isFloating = false
local floatConnection = nil
local startY = nil


local FLOAT_SPEED = 40
local FLOAT_HEIGHT = 3.8


local function toggleFloat()
    local character = player.Character
    if not character then 
        statusLabel.Text = "Status: no character"
        return 
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then 
        statusLabel.Text = "Status: missing parts"
        return 
    end
    
    isFloating = not isFloating
    
    if isFloating then
       
        startY = rootPart.Position.Y
        floatBtn.Text = "Float"
        floatBtn.BackgroundColor3 = Color3.fromRGB(80, 120, 80)
        statusLabel.Text = "Status: enable float"
        
        floatConnection = RunService.Heartbeat:Connect(function(dt)
            if not isFloating or not character or not character:IsDescendantOf(workspace) then 
                toggleFloat()
                return
            end
            
            humanoid:ChangeState(Enum.HumanoidStateType.Flying)
            
            local currentPos = rootPart.Position
            local maxY = startY + FLOAT_HEIGHT
            
           
            if currentPos.Y < maxY then
                local riseSpeed = math.min(FLOAT_SPEED, (maxY - currentPos.Y) * 10)
                rootPart.AssemblyLinearVelocity = Vector3.new(rootPart.AssemblyLinearVelocity.X, riseSpeed, rootPart.AssemblyLinearVelocity.Z)
            else
               
                rootPart.AssemblyLinearVelocity = Vector3.new(rootPart.AssemblyLinearVelocity.X, 0, rootPart.AssemblyLinearVelocity.Z)
                if math.abs(currentPos.Y - maxY) > 0.1 then
                    rootPart.CFrame = CFrame.new(
                        currentPos.X, 
                        math.min(currentPos.Y, maxY), 
                        currentPos.Z,
                        rootPart.CFrame.RightVector,
                        Vector3.new(0, 1, 0),
                        rootPart.CFrame.LookVector
                    )
                end
            end
            
            
            if UserInputService:GetFocusedTextBox() == nil then
                local moveDir = humanoid.MoveDirection
                rootPart.AssemblyLinearVelocity = Vector3.new(
                    moveDir.X * FLOAT_SPEED,
                    rootPart.AssemblyLinearVelocity.Y,
                    moveDir.Z * FLOAT_SPEED
                )
            end
        end)
    else
       
        if floatConnection then
            floatConnection:Disconnect()
            floatConnection = nil
        end
         
        floatBtn.Text = "Float"
        floatBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        statusLabel.Text = "Status: disable float"
        
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Landed)
           
            if rootPart then
                rootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            end
        end
    end
end


floatBtn.MouseButton1Click:Connect(function()
    pcall(toggleFloat) 
end)


player.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        if isFloating then
            pcall(toggleFloat)
        end
    end)
end)


gui.AncestryChanged:Connect(function()
    if not gui:IsDescendantOf(game) and isFloating then
        pcall(toggleFloat)
    end
end)
    end
})


  Tabs.Visual:Button({
    Title = "Exit game",
    Callback = function()
    local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local Player = Players.LocalPlayer

local ExitGui = Instance.new("ScreenGui")
ExitGui.Name = "ExitGameGui"
ExitGui.Parent = Player:WaitForChild("PlayerGui")


local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = ExitGui
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.5, -75, 0.1, 0) 
MainFrame.Size = UDim2.new(0, 150, 0, 80) 
MainFrame.Active = true
MainFrame.Draggable = true


local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
TitleBar.BorderSizePixel = 0
TitleBar.Size = UDim2.new(1, 0, 0, 20)
TitleBar.ZIndex = 2

local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = TitleBar

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, 0, 1, 0)
TitleLabel.Font = Enum.Font.Gotham
TitleLabel.Text = "Exit Game"
TitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
TitleLabel.TextSize = 12


local ExitButton = Instance.new("TextButton")
ExitButton.Name = "ExitButton"
ExitButton.Parent = MainFrame
ExitButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
ExitButton.Position = UDim2.new(0.1, 0, 0.4, 0)
ExitButton.Size = UDim2.new(0.8, 0, 0, 30)
ExitButton.Font = Enum.Font.Gotham
ExitButton.Text = "Exit game"
ExitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExitButton.TextSize = 14
ExitButton.AutoButtonColor = false

local ExitCorner = Instance.new("UICorner")
ExitCorner.CornerRadius = UDim.new(0, 6)
ExitCorner.Parent = ExitButton


ExitButton.MouseEnter:Connect(function()
    TweenService:Create(ExitButton, TweenInfo.new(0.15), {
        BackgroundColor3 = Color3.fromRGB(220, 80, 80)
    }):Play()
end)

ExitButton.MouseLeave:Connect(function()
    TweenService:Create(ExitButton, TweenInfo.new(0.15), {
        BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    }):Play()
end)


ExitButton.MouseButton1Click:Connect(function()
    game:Shutdown() 
end)


local guiVisible = true
UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        guiVisible = not guiVisible
        MainFrame.Visible = guiVisible
    end
end)


MainFrame.Size = UDim2.new(0, 0, 0, 0)
MainFrame.Visible = false
task.wait(0.5)

MainFrame.Visible = true
TweenService:Create(MainFrame, TweenInfo.new(0.25), {
    Size = UDim2.new(0, 150, 0, 80)
}):Play()
    end
})


Tabs.Esp:Section({Title = "Player"})


local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()
ESP:Toggle(true)
ESP.Players = false
ESP.Tracers = false
ESP.Boxes = false
ESP.Names = false
ESP.TeamColor = false









Tabs.Esp:Toggle({
    Title = "Esp enabled",
    Value = false, 
    Callback = function(Value)
    ESP.Players = Value
    end
    })


Tabs.Esp:Toggle({
    Title = "Esp name",
    Value = false, 
    Callback = function(Value)
    ESP.Names = Value
    end
    })
    
    
    
    Tabs.Esp:Toggle({
    Title = "Esp box",
    Value = false, 
    Callback = function(Value)
    ESP.Boxes = Value
    end
    })
    
    
    Tabs.Esp:Toggle({
    Title = "Esp tracer",
    Value = false, 
    Callback = function(Value)
    ESP.Tracers = Value
    end
    })
    




   
   
   
   
   
   Tabs.Misc:Button({
    Title = "Rejoin",
    Callback = function()
local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer
ts:Teleport(game.PlaceId, p)
    end
})


Tabs.Misc:Button({
    Title = "Server Hop",
    Callback = function()
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"
local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
function ListServers(cursor)
   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
   return Http:JSONDecode(Raw)
end
local Server, Next; repeat
   local Servers = ListServers(Next)
   Server = Servers.data[1]
   Next = Servers.nextPageCursor
until Server
TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
    end
})



 Tabs.Misc:Paragraph({
	Title = "Join id",
	Desc = game.JobId,
	Buttons = {
		{
			Title = "Copy",
			Callback = function()
				setclipboard(game.JobId)
			end
		}
	}
})

 Tabs.Misc:Input({
	Title = "Enter join id",
	Callback = function(value)
		_G.JobId = value
	end
})


Tabs.Misc:Button({
	Title = "Join id",
	Callback = function()
		(game:GetService("TeleportService")):TeleportToPlaceInstance(game.PlaceId, _G.JobId)
	end
})
